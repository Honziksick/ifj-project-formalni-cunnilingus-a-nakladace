.IFJcode24
DEFVAR GF@?tempDEST
DEFVAR GF@?tempSRC1
DEFVAR GF@?tempSRC2
CREATEFRAME
CALL $$main
JUMP $$end$$

        #---------------------------------------------------
        #pub fn ifj.substring(s: []u8, i: i32, j: i32) ?[]u8
        LABEL $$ifj$substring
        PUSHFRAME
        
            LT GF@?tempDEST LF@i int@0
            JUMPIFEQ $$$null GF@?tempDEST bool@true
            
            LT GF@?tempDEST LF@j int@0
            JUMPIFEQ $$$null GF@?tempDEST bool@true
            
            GT GF@?tempDEST LF@i LF@j
            JUMPIFEQ $$$null GF@?tempDEST bool@true
            
            STRLEN GF@?tempSRC1 LF@s
            
            GT GF@?tempDEST LF@i GF@?tempSRC1
            JUMPIFEQ $$$null GF@?tempDEST bool@true
            EQ GF@?tempDEST LF@i GF@?tempSRC1
            JUMPIFEQ $$$null GF@?tempDEST bool@true
            
            GT GF@?tempDEST LF@j GF@?tempSRC1
            JUMPIFEQ $$$null GF@?tempDEST bool@true
        
        PUSHS string@ 
        POPS GF@?tempDEST 
        
        LABEL $$$while
        
            JUMPIFEQ $$$substring_success LF@i LF@j
            
            GETCHAR GF@?tempSRC1 LF@s LF@i
            CONCAT GF@?tempDEST GF@?tempDEST GF@?tempSRC1
            ADD LF@i LF@i int@1
            JUMP $$$while
        
        LABEL $$$null
            PUSHS nil@nil
            JUMP $$$substring_end
        
        LABEL $$$substring_success
            PUSHS GF@?tempDEST
        
        LABEL $$$substring_end
        
        POPFRAME
        RETURN
        
        
        
    #-----------------------------------------
    #pub fn ifj.strcmp(s1: []u8, s2: []u8) i32
        LABEL $$ifj$strcmp
        PUSHFRAME
        
        STRLEN GF@?tempSRC1 LF@s1
        STRLEN GF@?tempSRC2 LF@s2
        DEFVAR LF@len
        MOVE LF@len GF@?tempSRC1
        
        LT GF@?tempDEST GF@?tempSRC1 GF@?tempSRC2
        JUMPIFEQ $$$cmp_def GF@?tempDEST bool@true
        
        MOVE LF@len GF@?tempSRC2
        
        LABEL $$$cmp_def
        DEFVAR LF@i
        MOVE LF@i int@0
        LABEL $$$cmp_while
        
            JUMPIFEQ $$$strcmp0 LF@i LF@len
            GETCHAR GF@?tempSRC1 LF@s1 LF@i
            GETCHAR GF@?tempSRC2 LF@s2 LF@i
            
            LT GF@?tempDEST GF@?tempSRC1 GF@?tempSRC2
            JUMPIFEQ $$$strcmp-1 GF@?tempDEST bool@true
            
            GT GF@?tempDEST GF@?tempSRC1 GF@?tempSRC2
            JUMPIFEQ $$$strcmp1 GF@?tempDEST bool@true
            
            ADD LF@i LF@i int@1
        
        JUMP $$$cmp_while
        
        LABEL $$$strcmp-1
            PUSHS int@-1
            JUMP $$$cmp_end
        
        LABEL $$$strcmp1
            PUSHS int@1
            JUMP $$$cmp_end
        
        LABEL $$$strcmp0
            PUSHS int@0
            JUMP $$$cmp_end
        
        LABEL $$$cmp_end
        
        POPFRAME
        RETURN
        
        
        
    #-----------------------------------------
    #pub fn ifj.ord(s: []u8, i: i32) i32
        LABEL $$ifj$ord
        PUSHFRAME
        
        STRLEN GF@?tempSRC1 LF@s
        EQ GF@?tempDEST GF@?tempSRC1 int@0
        JUMPIFEQ $$$ord_zero GF@?tempDEST bool@true
        
        LT GF@?tempDEST LF@i int@0
        JUMPIFEQ $$$ord_zero GF@?tempDEST bool@true
        EQ GF@?tempDEST LF@i GF@?tempSRC1
        JUMPIFEQ $$$ord_zero GF@?tempDEST bool@true
        GT GF@?tempDEST LF@i GF@?tempSRC1
        JUMPIFEQ $$$ord_zero GF@?tempDEST bool@true
        
        STRI2INT GF@?tempDEST LF@s LF@i
        PUSHS GF@?tempDEST
        JUMP $$$ord_end
        
        # Vrácení hodnoty 0
        LABEL $$$ord_zero
        PUSHS int@0
        
        LABEL $$$ord_end
        POPFRAME
        RETURN
        
        
        
LABEL $$main
PUSHFRAME
PUSHS string@Starting\032complex\032program\032with\032nullable\032handling\044\032recursion\044\032and\032nested\032conditions\046\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
DEFVAR LF@a$1$ 
PUSHS nil@nil 
POPS LF@a$1$ 
DEFVAR LF@b$1$ 
PUSHS int@10 
POPS LF@b$1$ 
DEFVAR LF@c$1$ 
PUSHS int@5 
POPS LF@c$1$ 
# if_0
PUSHS LF@a$1$
# then_0
POPS GF@?tempSRC1
JUMPIFEQ if_else$0 GF@?tempSRC1 nil@nil
DEFVAR LF@value$2$
MOVE LF@value$2$ GF@?tempSRC1
PUSHS string@Nullable\032a\032is\032not\032null\058\032 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
PUSHS LF@value$2$
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
PUSHS string@\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
JUMP if_end$0
LABEL if_else$0
# if_1
PUSHS LF@b$1$
# then_1
POPS GF@?tempSRC1
JUMPIFEQ if_else$1 GF@?tempSRC1 nil@nil
DEFVAR LF@value$4$
MOVE LF@value$4$ GF@?tempSRC1
PUSHS string@Nullable\032a\032is\032null\044\032but\032b\032is\032not\032null\058\032 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
PUSHS LF@value$4$
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
PUSHS string@\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
JUMP if_end$1
LABEL if_else$1
# if_2
PUSHS LF@c$1$
# then_2
POPS GF@?tempSRC1
JUMPIFEQ if_else$2 GF@?tempSRC1 nil@nil
DEFVAR LF@value$6$
MOVE LF@value$6$ GF@?tempSRC1
PUSHS string@Nullable\032a\032and\032b\032are\032null\044\032but\032c\032is\032not\032null\058\032 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
PUSHS LF@value$6$
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
PUSHS string@\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
JUMP if_end$2
LABEL if_else$2
PUSHS string@All\032nullable\032values\032are\032null\046\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
LABEL if_end$2
LABEL if_end$1
LABEL if_end$0
DEFVAR LF@sum$1$ 
CREATEFRAME
PUSHS LF@a$1$
DEFVAR TF@a$23$
POPS TF@a$23$
PUSHS LF@b$1$
DEFVAR TF@b$23$
POPS TF@b$23$
CALL $$nullable_sum
POPS LF@sum$1$ 
PUSHS string@Sum\032of\032a\032and\032b\058\032 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
PUSHS LF@sum$1$
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
PUSHS string@\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
DEFVAR LF@x$1$ 
PUSHS int@20 
POPS LF@x$1$ 
DEFVAR LF@y$1$ 
PUSHS int@15 
POPS LF@y$1$ 
# if_3
PUSHS int@20 
PUSHS int@15 
GTS
# then_3
PUSHS bool@true
JUMPIFNEQS if_else$3
PUSHS string@x\032is\032greater\032than\032y\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
DEFVAR LF@half_x$8$ 
PUSHS int@0 
POPS LF@half_x$8$ 
# if_4
PUSHS LF@half_x$8$
PUSHS int@0 
EQS
# then_4
PUSHS bool@true
JUMPIFNEQS if_else$4
PUSHS string@x\032is\032even\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
JUMP if_end$4
LABEL if_else$4
PUSHS string@x\032is\032odd\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
LABEL if_end$4
PUSHS int@0 
POPS LF@half_x$8$
JUMP if_end$3
LABEL if_else$3
PUSHS string@x\032is\032not\032greater\032than\032y\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
DEFVAR LF@half_y$11$ 
PUSHS int@1 
POPS LF@half_y$11$ 
# if_5
PUSHS LF@half_y$11$
PUSHS int@0 
EQS
# then_5
PUSHS bool@true
JUMPIFNEQS if_else$5
PUSHS string@y\032is\032even\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
JUMP if_end$5
LABEL if_else$5
PUSHS string@y\032is\032odd\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
LABEL if_end$5
PUSHS int@0 
POPS LF@half_y$11$
LABEL if_end$3
DEFVAR LF@total_sum$1$ 
PUSHS int@0 
POPS LF@total_sum$1$ 
DEFVAR LF@continue_input$1$ 
PUSHS int@1 
POPS LF@continue_input$1$ 
PUSHS string@Enter\032numbers\032to\032sum\032\0400\032to\032stop\041\058\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
# Definice vsech promennych v tele while
DEFVAR LF@input$14$ 
DEFVAR LF@num$15$
LABEL while_start$0
PUSHS LF@continue_input$1$
PUSHS int@0 
EQS
NOTS
# while_body_0
PUSHS bool@true
JUMPIFNEQS while_end$0
READ GF@?tempSRC1 int
PUSHS GF@?tempSRC1
POPS LF@input$14$ 
# if_8
PUSHS LF@input$14$
# then_8
POPS GF@?tempSRC1
JUMPIFEQ if_else$8 GF@?tempSRC1 nil@nil
MOVE LF@num$15$ GF@?tempSRC1
# if_9
PUSHS LF@num$15$
PUSHS int@0 
EQS
# then_9
PUSHS bool@true
JUMPIFNEQS if_else$9
PUSHS int@0 
POPS LF@continue_input$1$
JUMP if_end$9
LABEL if_else$9
PUSHS LF@total_sum$1$
PUSHS LF@num$15$
ADDS
POPS LF@total_sum$1$
LABEL if_end$9
JUMP if_end$8
LABEL if_else$8
PUSHS string@Invalid\032input\044\032try\032again\046\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
LABEL if_end$8
JUMP while_start$0
LABEL while_end$0
PUSHS string@Total\032sum\058\032 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
PUSHS LF@total_sum$1$
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
PUSHS string@\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
PUSHS string@Enter\032hello\032\058\032 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
DEFVAR LF@input_str$1$ 
READ GF@?tempSRC1 string
PUSHS GF@?tempSRC1
POPS LF@input_str$1$ 
DEFVAR LF@expected_str$1$ 
PUSHS string@hello 
POPS LF@expected_str$1$ 
# if_10
PUSHS LF@input_str$1$
# then_10
POPS GF@?tempSRC1
JUMPIFEQ if_else$10 GF@?tempSRC1 nil@nil
DEFVAR LF@str$19$
MOVE LF@str$19$ GF@?tempSRC1
DEFVAR LF@result$19$ 
CREATEFRAME
PUSHS LF@str$19$
DEFVAR TF@s1
POPS TF@s1
PUSHS LF@expected_str$1$
DEFVAR TF@s2
POPS TF@s2
CALL $$ifj$strcmp
POPS LF@result$19$ 
# if_11
PUSHS LF@result$19$
PUSHS int@0 
EQS
# then_11
PUSHS bool@true
JUMPIFNEQS if_else$11
PUSHS string@Correct\032string\032entered\033\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
JUMP if_end$11
LABEL if_else$11
PUSHS string@Incorrect\032string\044\032exiting\032program\046\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
POPFRAME
RETURN
LABEL if_end$11
JUMP if_end$10
LABEL if_else$10
PUSHS string@No\032string\032input\044\032exiting\032program\046\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
POPFRAME
RETURN
LABEL if_end$10
PUSHS string@Program\032completed\032successfully\046\010 
POPS GF@?tempSRC1
WRITE GF@?tempSRC1
POPFRAME
RETURN

LABEL $$nullable_sum
PUSHFRAME
DEFVAR LF@sum$23$ 
PUSHS int@0 
POPS LF@sum$23$ 
# if_12
PUSHS LF@a$23$
# then_12
POPS GF@?tempSRC1
JUMPIFEQ if_else$12 GF@?tempSRC1 nil@nil
DEFVAR LF@value$24$
MOVE LF@value$24$ GF@?tempSRC1
PUSHS LF@sum$23$
PUSHS LF@value$24$
ADDS
POPS LF@sum$23$
JUMP if_end$12
LABEL if_else$12
LABEL if_end$12
# if_13
PUSHS LF@b$23$
# then_13
POPS GF@?tempSRC1
JUMPIFEQ if_else$13 GF@?tempSRC1 nil@nil
DEFVAR LF@value$26$
MOVE LF@value$26$ GF@?tempSRC1
PUSHS LF@sum$23$
PUSHS LF@value$26$
ADDS
POPS LF@sum$23$
JUMP if_end$13
LABEL if_else$13
LABEL if_end$13
PUSHS LF@sum$23$
POPFRAME
RETURN

LABEL $$end$$

