#ifndef NONTERMINALS_H
#define NONTERMINALS_H

enum NonTerminal {
    NT_PROGRAM,
    NT_PROLOGUE,
    NT_FUN_DEF_LIST,
    NT_FUN_DEF,
    NT_PARAMETERS,
    NT_PARAM_LIST,
    NT_PARAM,
    NT_PARAM_LIST_REST,
    NT_RETURN_TYPE,
    NT_DATA_TYPE,
    NT_STATEMENT_LIST,
    NT_STATEMENT,
    NT_STATEMENT_REST,
    NT_VAR_DEF,
    NT_MODIFIABLE,
    NT_POSSIBLE_TYPE,
    NT_ASSIGNMENT,
    NT_FUN_CALL,
    NT_IF,
    NT_NULL_COND,
    NT_SEQUENCE,
    NT_WHILE,
    NT_RETURN,
    NT_RETURN_REST,
    NT_EXPR,
    NT_REL_EXPR,
    NT_REL_EXPR_REST,
    NT_REL_OP,
    NT_ADD_EXPR,
    NT_ADD_EXPR_REST,
    NT_ADD_OP,
    NT_MULTI_EXPR,
    NT_MULTI_EXPR_REST,
    NT_MULTI_OP,
    NT_TERM,
    NT_TERM_REST,
    NT_ARGUMENTS,
    NT_ARG_LIST,
    NT_ARG,
    NT_LITERAL,
    NON_TERMINAL_COUNT
};

std::array<std::string, NON_TERMINAL_COUNT> invNonTerminalMap = {
    "PROGRAM",
    "PROLOGUE",
    "FUN_DEF_LIST",
    "FUN_DEF",
    "PARAMETERS",
    "PARAM_LIST",
    "PARAM",
    "PARAM_LIST_REST"
    "RETURN_TYPE",
    "DATA_TYPE",
    "STATEMENT_LIST",
    "STATEMENT",
    "STATEMENT_REST",
    "VAR_DEF",
    "MODIFIABLE",
    "POSSIBLE_TYPE",
    "ASSIGNMENT",
    "FUN_CALL",
    "IF",
    "NULL_COND",
    "SEQUENCE",
    "WHILE",
    "RETURN",
    "RETURN_REST",
    "EXPR",
    "REL_EXPR",
    "REL_EXPR_REST",
    "REL_OP",
    "ADD_EXPR",
    "ADD_EXPR_REST",
    "ADD_OP",
    "MULTI_EXPR",
    "MULTI_EXPR_REST",
    "MULTI_OP",
    "TERM",
    "TERM_REST",
    "ARGUMENTS",
    "ARG_LIST",
    "ARG",
    "LITERAL"
};
#endif // NONTERMINALS_H